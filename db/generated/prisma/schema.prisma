generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bookings {
  Id              Int               @id @default(autoincrement())
  UserId          Int
  PickUpLocation  String
  DropLocation    String
  Product         String
  Distance        String
  Status          BookingStatus
  PaymentMode     PaymentMode
  BookingTime     DateTime          @default(now())
  DriverId        Int?
  Fare            String
  VehicleId       Int?
  StartTime       DateTime
  CreatedDateTime DateTime          @default(now())
  UpdatedDateTime DateTime          @default(now())
  Driver          Driver?           @relation(fields: [DriverId], references: [Id])
  User            User              @relation(fields: [UserId], references: [Id])
  Vehicle         Vehicle?          @relation(fields: [VehicleId], references: [Id])
  FareNegotiation FareNegotiation[]
}

model Driver {
  Id                       Int               @id @default(autoincrement())
  Name                     String?
  Gender                   Gender
  Password                 String?
  MobileNumber             String            @unique
  DOB                      DateTime?
  DrivingLicenceNumber     String
  DrivingLicenceFrontImage String
  DrivingLicenceBackImage  String
  DriverImage              String
  Email                    String?           @unique
  AdhaarCardNumber         String            @unique
  FrontSideAdhaarImage     String
  BackSideAdhaarImage      String
  PanNumber                String            @unique
  PanImage                 String
  LastLoggedIn             DateTime          @default(now())
  CreatedDate              DateTime          @default(now())
  IsOnline                 Boolean           @default(false)
  Bookings                 Bookings[]
  DriverVehicle            DriverVehicle[]
  DriverWallet             DriverWallet?
  FareNegotiation          FareNegotiation[]
  OwnerDriver              OwnerDriver[]
}

model DriverVehicle {
  Id        Int     @id @default(autoincrement())
  DriverId  Int
  VehicleId Int
  Driver    Driver  @relation(fields: [DriverId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])

  @@unique([DriverId, VehicleId])
}

model DriverWallet {
  Id          Int      @id @default(autoincrement())
  DriverId    Int      @unique
  Amount      Int
  LastUpdated DateTime @default(now())
  Driver      Driver   @relation(fields: [DriverId], references: [Id])
}

model FareNegotiation {
  Id             Int      @id @default(autoincrement())
  BookingId      Int
  DriverId       Int
  OwnerId        Int
  NegotiatedFare String
  NegotiatedTime DateTime @default(now())
  Bookings       Bookings @relation(fields: [BookingId], references: [Id])
  Driver         Driver   @relation(fields: [DriverId], references: [Id])
  Owner          Owner    @relation(fields: [OwnerId], references: [Id])

  @@unique([BookingId, DriverId])
}

model Owner {
  Id                   Int               @id @default(autoincrement())
  Name                 String
  Password             String
  MobileNumber         String            @unique
  DOB                  DateTime?
  Email                String?           @unique
  Gender               Gender
  AdhaarCardNumber     String?           @unique
  FrontSideAdhaarImage String?
  BackSideAdhaarImage  String?
  PanNumber            String?           @unique
  PanImage             String?
  LastLoggedIn         DateTime          @default(now())
  CreatedDate          DateTime          @default(now())
  OwnerImage           String?
  FareNegotiation      FareNegotiation[]
  OwnerDriver          OwnerDriver[]
  OwnerVehicle         OwnerVehicle[]
  OwnerWallet          OwnerWallet?
}

model OwnerDriver {
  Id       Int    @id @default(autoincrement())
  OwnerId  Int
  DriverId Int
  Driver   Driver @relation(fields: [DriverId], references: [Id])
  Owner    Owner  @relation(fields: [OwnerId], references: [Id])
}

model OwnerVehicle {
  Id        Int     @id @default(autoincrement())
  OwnerId   Int
  VehicleId Int
  Owner     Owner   @relation(fields: [OwnerId], references: [Id])
  Vehicle   Vehicle @relation(fields: [VehicleId], references: [Id])
}

model OwnerWallet {
  Id          Int      @id @default(autoincrement())
  OwnerId     Int      @unique
  Amount      Int
  LastUpdated DateTime @default(now())
  Owner       Owner    @relation(fields: [OwnerId], references: [Id])
}

model User {
  Id           Int         @id @default(autoincrement())
  MobileNumber String
  CreatedDate  DateTime    @default(now())
  LastLoggedIn DateTime    @default(now())
  Gender       Gender
  Name         String
  Bookings     Bookings[]
  UserWallet   UserWallet?
}

model UserWallet {
  Id     Int  @id @default(autoincrement())
  UserId Int  @unique
  Amount Int
  User   User @relation(fields: [UserId], references: [Id])
}

model Vehicle {
  Id                    Int             @id @default(autoincrement())
  Model                 String
  Year                  String
  Category              String
  VehicleImage          String?
  VehicleInsuranceImage String?
  PermitImage           String?
  VehicleNumber         String
  Bookings              Bookings[]
  DriverVehicle         DriverVehicle[]
  OwnerVehicle          OwnerVehicle[]
}

model otps {
  CreatedAt    DateTime @default(now())
  ExpiresAt    DateTime @default(now())
  Id           Int      @id @default(autoincrement())
  MobileNumber String   @unique
  Otp          String

  @@index([MobileNumber])
}

model admin {
  id                                        String                  @id
  email                                     String                  @unique
  passwordHash                              String
  fullName                                  String
  isActive                                  Boolean                 @default(true)
  createdAt                                 DateTime                @default(now())
  updatedAt                                 DateTime
  lastLogin                                 DateTime?
  permission_audit_logs                     permission_audit_logs[]
  roles                                     roles[]
  user_roles_user_roles_adminIdToadmin      user_roles[]            @relation("user_roles_adminIdToadmin")
  user_roles_user_roles_assignedByIdToadmin user_roles[]            @relation("user_roles_assignedByIdToadmin")

  @@index([email])
  @@index([isActive])
}

model permission_audit_logs {
  id              String          @id
  actionType      AuditActionType
  details         String?
  actionTimestamp DateTime        @default(now())
  adminId         String
  roleId          String?
  permissionId    String?
  admin           admin           @relation(fields: [adminId], references: [id])
  permissions     permissions?    @relation(fields: [permissionId], references: [id])
  roles           roles?          @relation(fields: [roleId], references: [id])

  @@index([actionTimestamp])
  @@index([adminId])
  @@index([roleId])
}

model permission_categories {
  id           String        @id
  name         String        @unique
  description  String?
  icon         String?
  displayOrder Int           @default(0)
  permissions  permissions[]

  @@index([displayOrder])
}

model permissions {
  id                    String                  @id
  name                  String
  code                  String                  @unique
  description           String?
  categoryId            String
  permission_audit_logs permission_audit_logs[]
  permission_categories permission_categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  role_permissions      role_permissions[]

  @@index([categoryId])
  @@index([code])
}

model role_permissions {
  id           String      @id
  roleId       String
  permissionId String
  permissions  permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  roles        roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId])
  @@index([roleId])
}

model roles {
  id                    String                  @id
  name                  String                  @unique
  description           String?
  isSystemRole          Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  createdById           String?
  permission_audit_logs permission_audit_logs[]
  role_permissions      role_permissions[]
  admin                 admin?                  @relation(fields: [createdById], references: [id])
  user_roles            user_roles[]

  @@index([isSystemRole])
  @@index([name])
}

model user_roles {
  id                                   String   @id
  assignedAt                           DateTime @default(now())
  adminId                              String
  roleId                               String
  assignedById                         String?
  admin_user_roles_adminIdToadmin      admin    @relation("user_roles_adminIdToadmin", fields: [adminId], references: [id], onDelete: Cascade)
  admin_user_roles_assignedByIdToadmin admin?   @relation("user_roles_assignedByIdToadmin", fields: [assignedById], references: [id])
  roles                                roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([adminId, roleId])
  @@index([adminId])
  @@index([roleId])
}

enum BookingStatus {
  Pending
  Confirmed
  Cancelled
  Ongoing
  Completed
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentMode {
  CASH
  ONLINE
}

enum UserType {
  DRIVER
  OWNER
  USER
}

enum AuditActionType {
  GRANT
  REVOKE
  ROLE_CREATE
  ROLE_UPDATE
  ROLE_DELETE
}
